{
  "name": "steam-web",
  "version": "0.6.0",
  "description": "A wrapper for the Steam Web API.",
  "keywords": [
    "steam",
    "team fortress 2"
  ],
  "author": {
    "name": "Aaron Tidwell",
    "email": "aaron.tidwell@gmail.com"
  },
  "main": "./lib/steam",
  "repository": {
    "type": "git",
    "url": "http://github.com/Tidwell/nodeSteam"
  },
  "dependencies": {
    "qs": "^6.1.0"
  },
  "engines": [
    "node >= 0.4.0"
  ],
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha \"./test/**/*.spec.js\" --timeout 20000",
    "coverage": "node ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha \"./test/**/*.spec.js\" -- --timeout 20000",
    "format-lib": "./node_modules/jsfmt/bin/jsfmt -w ./lib ./*.js",
    "format-spec": "./node_modules/jsfmt/bin/jsfmt -w ./test",
    "format": "npm run-script format-lib && npm run-script format-spec",
    "lint-lib": "./node_modules/jshint/bin/jshint ./lib",
    "lint-spec": "./node_modules/jshint/bin/jshint ./test",
    "lint": "npm run-script lint-lib && npm run-script lint-spec",
    "integrate": "npm run-script test && npm run-script format && npm run-script lint",
    "docs": "./node_modules/.bin/jsdoc -r ./lib -d ./docs --readme README.md -t ./node_modules/docdash",
    "doc-deploy": "git subtree push --prefix docs origin gh-pages"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.4.5",
    "docdash": "^0.4.0",
    "istanbul": "^0.4.5",
    "jsdoc": "^3.4.3",
    "jsfmt": "^0.5.3",
    "jshint": "^2.9.4"
  },
  "contributors": [
    {
      "name": "This is an incomplete list of all those who have contributed to make steam-web."
    },
    {
      "name": "Much thanks to all, if anyone is missing, please let us know!"
    },
    {
      "name": "Aaron Tidwell"
    },
    {
      "name": "joercasey"
    },
    {
      "name": "_FR_Starfox64"
    },
    {
      "name": "Psyrax"
    },
    {
      "name": "georg fischer"
    },
    {
      "name": "Romel Dris"
    },
    {
      "name": "Vincent Dank Gogh"
    },
    {
      "name": "Lasse Sprengel"
    },
    {
      "name": "Andrew Dassonville"
    }
  ],
  "readme": "# steam-web\n\n## [Full Documentation on GH Pages](http://tidwell.github.io/nodeSteam/)\n\nA [node.js](http://github.com/joyent/node) wrapper for Valve's [Steam Web API](http://developer.valvesoftware.com/wiki/Steam_Web_API).  Also supports the methods provided for [TF2/TF2Beta/Portal](http://wiki.teamfortress.com/wiki/WebAPI).\n\nUse of the API requires an API key, obtainable [here](http://steamcommunity.com/dev/apikey).\n\nThis implementation is not supported, endorsed, or created by Valve - I'm just a fan.  This is just a wrapper - all of Valve's terms and conditions for using their API still apply, see the [Steam community developer page](http://steamcommunity.com/dev) for additional information.\n\n## Installation\n\n```bash\n$ npm install steam-web\n```\n\n### Methods\n\nAll methods accept a single options object.  The key names match the query string parameters specified in the valve documentation. See usage and the valve documentation for any additional params.\n\nAll methods can be passed a ``.apiVersion`` property that overrides the default api version in the url.  Some methods (such as getSchema) will support different games on different versions (TF2 is only supported on v0001, CSGO is only supported on v0002). You can use this property to change the version for the api request if you are not getting back the expected response.\n\nIf using JSON for results (default), the result will automatically be parsed into a json object before being passed to the callback.  Any other formats will return the raw data (xml or vdf).\n\n#### getNewsForApp\n\n\n#### getGlobalAchievementPercentagesForApp\n\n\n#### getPlayerSummaries\n\n\n#### getFriendList\n\n\n#### getSchema\n\n\n#### getPlayerItems\n\n\n#### getAssetPrices\n\n\n#### getAssetClassInfo\n\n\n#### getPlayerAchievements\n\n\n#### getRecentlyPlayedGames\n\n\n#### getUserStatsForGame\n\n\n#### getOwnedGames\n\n\n#### getGlobalStatsForGame\n\n\n#### isPlayingSharedGame\n\n\n#### getSchemaForGame\n\n\n#### getPlayerBans\n\n\n#### getAppList\n\n\n#### getServersAtAddress\n\n\n#### upToDateCheck\n\n\n#### getUserGroupList\n\n\n#### resolveVanityURL\n\n\n#### getNumberOfCurrentPlayers\n\n\n#### getSteamLevel\n\n\n#### getBadges\n\n\n#### getCommunityBadgeProgress\n\n\n#### getServerInfo\n\n\n#### getSupportedAPIList\n\n\n#### getSchemaURL\n\n\n#### getStoreMetadata\n\n\n#### getStoreStatus\n\n\n## Usage\n\n```javascript\nvar steam = require('steam-web');\n\nvar s = new steam({\n  apiKey: 'XXXXXXXXXXXXXXXX',\n  format: 'json' //optional ['json', 'xml', 'vdf']\n});\n\ns.getNewsForApp({\n  appid: 440,\n  count: 3,\n  maxlength: 300,\n  callback: function(err, data) {\n    console.log(data);\n  }\n})\ns.getGlobalAchievementPercentagesForApp({\n  gameid: 440,\n  callback: function(err, data) {\n    console.log(data);\n  }\n});\ns.getPlayerSummaries({\n  steamids: ['76561198037414410', '76561197960435530'],\n  callback: function(err, data) {\n    console.log(data);\n  }\n})\ns.getFriendList({\n  steamid: '76561197960435530',\n  relationship: 'all', //'all' or 'friend'\n  callback: function(err,data) {\n    console.log(data);\n  },\n})\ns.getSchema({\n  gameid: 440,\n  callback: function(err, data) {\n    console.log(data);\n  }\n})\ns.getPlayerItems({\n  gameid: 440,\n  steamid: '76561197960435530',\n  callback: function(err, data) {\n    console.log(data);\n  }\n})\ns.getAssetPrices({\n  appid: 440,  //can also use gameid instead for convenience\n  callback: function(err,data) {\n    console.log(data);\n  }\n})\ns.getPlayerAchievements({\n  gameid: 440,\n  steamid: '76561197960435530',\n  l: 'en',\n  callback: function(err,data) {\n    console.log(data);\n  }\n})\ns.getRecentlyPlayedGames({\n  steamid: '76561197960435530',\n  callback: function(err,data) {\n    console.log(data)\n  }\n})\ns.getOwnedGames({\n  steamid: '76561197960435530',\n  callback: function(err,data) {\n    console.log(data)\n  }\n})\ns.getUserStatsForGame({\n  steamid: '76561197963506690',\n  appid: 730,\n  callback: function(err,data) {\n    console.log(data);\n  }\n})\ns.getGlobalStatsForGame({\n  appid: 17740,\n  name: ['global.map.emp_isle'], // can also pass a single string\n  count: 1, // or you can let the module work it out for you\n  callback: function(err,data) {\n    console.log(data);\n  }\n})\ns.isPlayingSharedGame({\n  steamid: '76561198120639625',\n  appid_playing: 730,\n  callback: function(err,data) {\n    console.log(data);\n  }\n})\ns.getSchemaForGame({\n  appid: 730,\n  callback: function(err,data) {\n    console.log(data);\n  }\n})\ns.getPlayerBans({\n  steamids: ['76561198120639625'], // can also pass a single string\n  callback: function(err,data) {\n    console.log(data);\n  }\n})\ns.getAppList({\n  callback: function(err, data) {\n    console.log(data);\n  }\n})\ns.getServersAtAddress({\n  addr: '193.192.58.116',\n  callback: function(err, data) {\n    console.log(data);\n  }\n})    \ns.upToDateCheck({\n  version: 100,\n  appid: 440,\n  callback: function(err, data) {\n    console.log(data);\n  }\n})  \ns.getUserGroupList({\n  steamid: '76561197960435530',\n  callback: function(err, data) {\n    console.log(data);\n  }\n})    \ns.resolveVanityURL({\n  vanityurl: 'vincegogh',\n  callback: function(err, data) {\n    console.log(data);\n  }\n})  \ns.getNumberOfCurrentPlayers({\n  appid: 440,\n  callback: function(err, data) {\n    console.log(data);\n  }\n})\ns.getSteamLevel({\n  steamid: '76561197960435530',\n  callback: function(err, data) {\n    console.log(data);\n  }\n})    \ns.getBadges({\n  steamid: '76561197960435530',\n  callback: function(err, data) {\n    console.log(data);   \n  }\n})\ns.getCommunityBadgeProgress({\n  steamid: '76561197960435530',\n  badgeid: 2,\n  callback: function(err, data) {\n    console.log(data);\n  }\n})  \ns.getServerInfo({\n  callback: function(err, data) {\n    console.log(data);\n  }\n})    \ns.getSupportedAPIList({\n  callback: function(err, data) {\n    console.log(data);\n  }\n})\ns.getSchemaURL({\n  appid: 440,\n  callback: function(err, data) {\n    console.log(data);\n  }\n})    \ns.getStoreMetadata({\n  appid: 440,\n  callback: function(err, data) {\n    console.log(data);\n  }\n})\ns.getStoreStatus({\n  appid: 440,\n  callback: function(err, data) {\n    console.log(data);\n  }\n})\n```\n\nThere are two ways to use getAssetClassInfo.  By default, the Steam API\nwants a query string formatted as: ?classid0=1234&classid1=5678&class_count=2\n\nAs such, you can either manually generate the keys and call the method like this:\n\n```javascript\ns.getAssetClassInfo({\n  appid: 440, //can also use gameid instead for convenience\n  classid0: '16891096',\n  classid1: 151,\n  class_count: 2,\n  callback: function(err,data) {\n    console.log(data);\n  }\n})\n```\n\nOR, we have provided a convenience property so you can just pass an array of ids\n(when using the convenience property, you don't need to pass class_count either)\n\n```javascript\ns.getAssetClassInfo({\n  appid: 440, //can also use gameid instead for convenience\n  classIds: ['16891096',151],\n  callback: function(err,data) {\n    console.log(data);\n  }\n})\n```\n\n### Run Tests\n[![Build Status](https://travis-ci.org/Tidwell/nodeSteam.svg?branch=master)](https://travis-ci.org/Tidwell/nodeSteam)\n\n```bash\n$ npm test\n```\n\n### Run JsFmt/JsHint\n\n```bash\n$ npm run format\n```\n\n```bash\n$ npm run lint\n```\n\n### Generate Docs\n\n```bash\n$ npm run docs\n```\n\n### Generate Coverage Report\n\n```bash\n$ npm run coverage\n```\n\n### All (travis integration tests)\n\n```bash\n$ npm run integrate\n```\n\n## Changes\n\n#### 0.6.0\n* Add apiVersion config property to all methods for changing generated enpoints (#24)\n* Add tests for addVersion method (#24)\n* Split tests into multiple .spec files\n* Fix jsfmt for proper indentation\n* Marked private methods as private (hidden in docs)\n* Update tasks in Readme\n\n#### 0.5.0\n* Fix README styling (#18)\n* Improve code documentation (#17)\n* Add lint build task\n* Add format build task\n* Add docs build task\n* Add coverage build task\n* Update AUTHORS file\n\n#### 0.4.0\n* Added getAppList\n* Added getServersAtAddress\n* Added upToDateCheck\n* Added getUserGroupList\n* Added resolveVanityURL\n* Added getNumberOfCurrentPlayers\n* Added getSteamLevel\n* Added getBadges\n* Added getCommunityBadgeProgress\n* Added getServerInfo\n* Added getSupportedAPIList\n* Added getSchemaURL\n* Added getStoreMetadata\n* Added getStoreStatus\n* Updated Readme and tests\n* Updated AUTHORS file\n\n#### 0.3.0\n* Added getGlobalStatsForGame\n* Added isPlayingSharedGame\n* Added getSchemaForGame\n* Added getPlayerBans\n* Replaced tests with chai/mocha\n* Updated Readme\n* Added AUTHORS file\n\n#### 0.2.5\n* Added error handling for invalid api keys\n* Added tests and README\n\n#### 0.2.4\n* Added getUserStatsForGame\n* Updated README and tests, added gitignore\n\n#### 0.2.3\n* Added getOwnedGames\n* Added getRecentlyPlayedGames\n* Add getPlayerAchievements method\n* Add an error handler to the HTTP get request. This will capture ETIMEDOUT and other connections errors.\n* Updated README and tests with new methods\n\n#### 0.2.1\n* Changed npm module to steam-web to allow https://github.com/seishun/node-steam to use steam npm module name, update your dependencies.\n\n#### 0.1.3\n* Implemented new API methods from 12/1/2011 update: getAssetClassInfo, getAssetPrices, and getFriendList\n* Fixed bug where callbacks were fired twice for certain error events\n* Added convenience property to getAssetClassInfo (classIds instead of forcing manual property generation)\n\n#### 0.1.2\n* Changed requirements to node >= 0.4.0\n* Modified API so first argument of all callbacks is err (to correspond with standard practices)\n* Additional error handling (though methods will return empty arrays if invalid ids are sent to steam\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Tidwell/nodeSteam/issues"
  },
  "_id": "steam-web@0.6.0",
  "dist": {
    "shasum": "52faf171a5409a1ca04048ad928a8b8fe212d950"
  },
  "_from": "steam-web@",
  "_resolved": "https://registry.npmjs.org/steam-web/-/steam-web-0.6.0.tgz"
}
